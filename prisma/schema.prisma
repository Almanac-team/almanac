// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Items

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  categories        Category[]
  settings          UserSettings? // in the case this is null, just give defaults
  zoneInfo          Zone[]
  scheduleableEvent ScheduleableEvent[]
}

enum DateFormat {
  DayMonthYear
  MonthDayYear
  YearMonthDay
}

enum TimeFormat {
  MidDay
  Military
}

model UserSettings {
  id         String     @id @default(cuid())
  dateFormat DateFormat
  timeFormat TimeFormat
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id                  String               @id @default(cuid())
  name                String
  color               String
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityDefinitions ActivityDefinition[]

  @@index([userId])
}

enum ActivityType {
  task
  event
}

model ActivityDefinition {
  id                String             @id @default(cuid())
  categoryId        String
  activityTemplates ActivityTemplate[]
  repeatConfig      RepeatConfig?
  endConfig         EndConfig?
  repeatConfigId    String?
  endConfigId       String?

  activities          Activity[]
  category            Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityCompletions ActivityCompletions?
  schedulableEvent    ScheduleableEvent[]

  @@index([categoryId])
}

model ActivityCompletions {
  activityDefinitionId String                         @unique
  activityDefinition   ActivityDefinition             @relation(fields: [activityDefinitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latestFinishedIndex  Int // -1 if none
  exceptions           ActivityCompletionExceptions[]
}

model ActivityCompletionExceptions {
  activityDefinitionId String
  index                Int
  activityCompletion   ActivityCompletions @relation(fields: [activityDefinitionId], references: [activityDefinitionId], onDelete: Cascade, onUpdate: Cascade)

  @@id([activityDefinitionId, index])
  @@index([activityDefinitionId])
}

enum RepeatUnit {
  day
  week
  month
  year
}

model RepeatConfig {
  activityDefinitionId String             @id
  every                Int
  unit                 RepeatUnit
  info                 Int
  activityDefinition   ActivityDefinition @relation(fields: [activityDefinitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([activityDefinitionId])
}

enum EndType {
  count
  until
  never
}

model EndConfig {
  activityDefinitionId String             @id
  endType              EndType
  endDate              DateTime
  endCount             Int
  activityDefinition   ActivityDefinition @relation(fields: [activityDefinitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([activityDefinitionId])
}

enum RepeatType {
  this
  future
}

model ActivityTemplate {
  activityDefinitionId String
  index                Int
  activityDefinition   ActivityDefinition @relation(fields: [activityDefinitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  at                   DateTime
  activityInnerId      String
  activityInner        ActivityInner      @relation(fields: [activityInnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  repeatType           RepeatType

  @@id([activityDefinitionId, index])
  @@index([activityDefinitionId])
  @@index([activityInnerId])
}

model Activity {
  activityDefinitionId String
  index                Int
  activityDefinition   ActivityDefinition @relation(fields: [activityDefinitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  at                   DateTime
  activityInnerId      String
  activityInner        ActivityInner      @relation(fields: [activityInnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([activityDefinitionId, index])
  @@index([activityDefinitionId])
  @@index([activityInnerId])
}

model ActivityInner {
  id                String             @id @default(cuid())
  name              String
  type              ActivityType
  task              Task?
  event             Event?
  activity          Activity[]
  activityTemplates ActivityTemplate[]
}

// Task - something to be finished by a set time
model Task {
  activityInnerId String        @id
  estimatedTime   Int
  deadlineMod     Int
  reminderMod     Int
  startMod        Int
  activityInner   ActivityInner @relation(fields: [activityInnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([activityInnerId])
}

// Event - something to do at a set time
model Event {
  activityInnerId String        @id
  estimatedTime   Int
  reminderMod     Int
  startMod        Int
  activityInner   ActivityInner @relation(fields: [activityInnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([activityInnerId])
}

model ScheduleableEvent {
  id                      String             @id @default(cuid())
  hours                   Int
  completed               Boolean            @default(false)
  activityDefinitionId    String
  activityDefinitionIndex Int
  activityDefinition      ActivityDefinition @relation(fields: [activityDefinitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                    User               @relation(fields: [userId], references: [id])
  userId                  String
  scheduled               Schedule?

  @@index([activityDefinitionId])
  @@index([userId])
}

model Schedule {
  schedulableEventId String            @id
  schedulableEvent   ScheduleableEvent @relation(fields: [schedulableEventId], references: [id])
  date               DateTime

  @@index([schedulableEventId])
}

enum ZoneType {
  include
  exclude
}

// model ActivityZonePair {
//   activityId String
//   zoneType   ZoneType
//   activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   zoneId     String
//   zone       Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//
//   @@id([activityId, zoneId])
//   @@index([activityId])
//   @@index([zoneId])
// }

model Zone {
  id      String   @id @default(cuid())
  userId  String
  name    String
  color   String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regions Region[]

  // activityZonePair ActivityZonePair[]
  @@index([userId])
  @@index([id])
}

model Region {
  id     String @id @default(cuid())
  zoneId String
  from   Int
  to     Int
  zone   Zone   @relation(fields: [zoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([zoneId])
}
